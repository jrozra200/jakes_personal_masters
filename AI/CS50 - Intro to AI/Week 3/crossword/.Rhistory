trait = True
else:
trait = False
return trait
def get_genes(name, one_gene, two_genes):
if name in one_gene:
genes = 1
elif name in two_genes:
genes = 2
else:
genes = 0
return genes
def update(probabilities, one_gene, two_genes, have_trait, p):
"""
Add to `probabilities` a new joint probability `p`.
Each person should have their "gene" and "trait" distributions updated.
Which value for each distribution is updated depends on whether
the person is in `have_gene` and `have_trait`, respectively.
"""
# Get the unique names
names = set(probabilities)
# For each unique name in probabilities...
for name in names:
# ... figure out how many genes and what trait they have...
genes = get_genes(name, one_gene, two_genes)
trait = get_trait(name, have_trait)
# ... then update the appropriate probability with p
probabilities[name]['gene'][genes] = p
probabilities[name]['trait'][trait] = p
def normalize(probabilities):
"""
Update `probabilities` such that each probability distribution
is normalized (i.e., sums to 1, with relative proportions the same).
"""
# Get the unique names
names = set(probabilities)
for name in names:
# First let's update the genes dict
# Get the current probabilities
two_genes = probabilities[name]['gene'][2]
one_gene = probabilities[name]['gene'][1]
no_genes = probabilities[name]['gene'][0]
# 1 = alpha * (two_genes + one_gene + no_genes)
alpha = 1 / (two_genes + one_gene + no_genes)
# update the probabilities with alpha
probabilities[name]['gene'][2] = two_genes * alpha
probabilities[name]['gene'][1] = one_gene * alpha
probabilities[name]['gene'][0] = no_genes * alpha
# Now let's update the trait dict
have_trait = probabilities[name]['trait'][True]
no_trait = probabilities[name]['trait'][False]
# 1 = alpha * (have_trait + no_trait)
alpha = 1 / (have_trait + no_trait)
# update the probabilities with alpha
probabilities[name]['trait'][True] = have_trait * alpha
probabilities[name]['trait'][False] = no_trait * alpha
people = load_data("AI/CS50 - Intro to AI/Week 2/heredity/data/family0.csv")
people
probabilities = {
person: {
"gene": {
2: 0,
1: 0,
0: 0
},
"trait": {
True: 0,
False: 0
}
}
for person in people
}
names = set(people)
for have_trait in powerset(names):
# Check if current set of people violates known information
fails_evidence = any(
(people[person]["trait"] is not None and
people[person]["trait"] != (person in have_trait))
for person in names
)
if fails_evidence:
continue
# Loop over all sets of people who might have the gene
for one_gene in powerset(names):
for two_genes in powerset(names - one_gene):
# Update probabilities with new joint probability
p = joint_probability(people, one_gene, two_genes, have_trait)
update(probabilities, one_gene, two_genes, have_trait, p)
probabilities
normalize(probabilities)
probabilities
tmp_prob = {}
type(tmp_pr)
type(tmp_pron)
type(tmp_prob)
names = set(people)
names
tmp_prob = {}
# Let's go person by person and calculate their part of the prob
for name in names:
if people[name]['mother'] is None: # they have no parents
# How many genes do they have?
genes = get_genes(name, one_gene, two_genes)
# Do they have the trait?
trait = get_trait(name, have_trait)
par_prob = PROBS['gene'][genes] * PROBS['trait'][genes][trait]
tmp_prob[name] = par_prob
else: # They do have parents
kid_genes = get_genes(name, one_gene, two_genes)
dad_genes = get_genes(people[name]['father'], one_gene, two_genes)
mom_genes = get_genes(people[name]['mother'], one_gene, two_genes)
kid_prob = get_parent_pass(kid_genes, dad_genes, mom_genes)
kid_trait = get_trait(name, have_trait)
kid_trait_prob = PROBS['trait'][kid_genes][kid_trait]
kid_prob = kid_prob * kid_trait_prob
tmp_prob[name] = kid_prob
tmp_prob
one_gene
two_genes
has_trait
have_trait
one_gene = {'Harry'}
two_genes = {'James'}
have_trait = {'James'}
names = set(people)
tmp_prob = {}
# Let's go person by person and calculate their part of the prob
for name in names:
if people[name]['mother'] is None: # they have no parents
# How many genes do they have?
genes = get_genes(name, one_gene, two_genes)
# Do they have the trait?
trait = get_trait(name, have_trait)
par_prob = PROBS['gene'][genes] * PROBS['trait'][genes][trait]
tmp_prob[name] = par_prob
else: # They do have parents
kid_genes = get_genes(name, one_gene, two_genes)
dad_genes = get_genes(people[name]['father'], one_gene, two_genes)
mom_genes = get_genes(people[name]['mother'], one_gene, two_genes)
kid_prob = get_parent_pass(kid_genes, dad_genes, mom_genes)
kid_trait = get_trait(name, have_trait)
kid_trait_prob = PROBS['trait'][kid_genes][kid_trait]
kid_prob = kid_prob * kid_trait_prob
tmp_prob[name] = kid_prob
tmp_prob
tmp_prob.values()
final_prob = 1
for val in tmp_prob.values():
final_prob *= val
final_prob
probabilities = {
person: {
"gene": {
2: 0,
1: 0,
0: 0
},
"trait": {
True: 0,
False: 0
}
}
for person in people
}
names = set(people)
for have_trait in powerset(names):
# Check if current set of people violates known information
fails_evidence = any(
(people[person]["trait"] is not None and
people[person]["trait"] != (person in have_trait))
for person in names
)
if fails_evidence:
continue
# Loop over all sets of people who might have the gene
for one_gene in powerset(names):
for two_genes in powerset(names - one_gene):
# Update probabilities with new joint probability
p = joint_probability(people, one_gene, two_genes, have_trait)
update(probabilities, one_gene, two_genes, have_trait, p)
probabilities
.99 * .99
.99 * 0.01
(.99 * 0.01) * 2
one_gene
one_gene = {'Harry'}
two_genes = {'James'}
have_trait = {'James'}
name = 'Lily'
genes = get_genes(name, one_gene, two_genes)
genes
trait = get_trait(name, have_trait)
trait
PROBS['gene'][genes] * PROBS['trait'][genes][trait]
par_prob = PROBS['gene'][genes] * PROBS['trait'][genes][trait]
tmp_prob = {}
tmp_prob[name] = par_prob
name = 'James'
genes = get_genes(name, one_gene, two_genes)
genes
trait = get_trait(name, have_trait)
trait
PROBS['gene'][genes]
PROBS['trait'][genes][trait]
par_prob = PROBS['gene'][genes] * PROBS['trait'][genes][trait]
par_prob
tmp_prob[name] = par_prob
name = 'Harry'
kid_genes = get_genes(name, one_gene, two_genes)
kid_genes
dad_genes = get_genes(people[name]['father'], one_gene, two_genes)
dad_genes
mom_genes = get_genes(people[name]['mother'], one_gene, two_genes)
mom_genes
(0.99 * 2)
(0.99 * 2) * (0.99 * 2)
((0.99 * 0.99) * (1 - (0.99 * 0.99))) + ((0.99 * 0.99) * (1 - (0.99 * 0.99)))
((0.99 * 0.01) * (1 - (0.01 * 0.01))) + ((0.99 * 0.01) * (1 - (0.01 * 0.01)))
dad = (0.99 * 0.99)
mom = (0.01 * 0.01)
(mom * (1 - dad)) + ((1 - mom) * dad)
mom = (0.99 * 0.99)
(mom * (1 - dad)) + ((1 - mom) * dad)
dad = (0.01 * 0.01)
mom = (0.01 * 0.01)
(mom * (1 - dad)) + ((1 - mom) * dad)
one_gene
two_genes
have_trait
def get_parent_pass(kid_genes, dad_genes, mom_genes):
# Need 2 genes passed - one from each parent
if kid_genes == 2:
if dad_genes == 2 and mom_genes == 2:
# you can get one from your dad with prob of (0.99 * 0.99)
# you can get one from your mom with prob of (0.99 * 0.99)
# you need to get one from your mom AND one from your dad
dad = (0.99 * 0.99)
mom = (0.99 * 0.99)
prob = dad * mom
elif dad_genes == 2 and mom_genes == 1:
# you can get one from your dad with prob of (0.99 * 0.99)
# you can get one from your mom with prob of (0.99 * 0.01)
# you need to get one from your mom AND one from your dad
dad = (0.99 * 0.99)
mom = (0.99 * 0.01)
prob = dad * mom
elif dad_genes == 2 and mom_genes == 0:
# you can get one from your dad with prob of (0.99 * 0.99)
# you can get one from your mom with prob of (0.01 * 0.01)
# you need to get one from your mom AND one from your dad
dad = (0.99 * 0.99)
mom = (0.01 * 0.01)
prob = dad * mom
elif dad_genes == 1 and mom_genes == 2:
# you can get one from your dad with prob of (0.99 * 0.01)
# you can get one from your mom with prob of (0.99 * 0.99)
# you need to get one from your mom AND one from your dad
dad = (0.99 * 0.01)
mom = (0.99 * 0.99)
prob = dad * mom
elif dad_genes == 1 and mom_genes == 1:
# you can get one from your dad with prob of (0.99 * 0.01)
# you can get one from your mom with prob of (0.99 * 0.01)
# you need to get one from your mom AND one from your dad
dad = (0.99 * 0.01)
mom = (0.99 * 0.01)
prob = dad * mom
elif dad_genes == 1 and mom_genes == 0:
# you can get one from your dad with prob of (0.99 * 0.01)
# you can get one from your mom with prob of (0.01 * 0.01)
# you need to get one from your mom AND one from your dad
dad = (0.99 * 0.01)
mom = (0.01 * 0.01)
prob = dad * mom
elif dad_genes == 0 and mom_genes == 2:
# you can get one from your dad with prob of (0.01 * 0.01)
# you can get one from your mom with prob of (0.99 * 0.99)
# you need to get one from your mom AND one from your dad
dad = (0.01 * 0.01)
mom = (0.99 * 0.99)
prob = dad * mom
elif dad_genes == 0 and mom_genes == 1:
# you can get one from your dad with prob of (0.01 * 0.01)
# you can get one from your mom with prob of (0.99 * 0.01)
# you need to get one from your mom AND one from your dad
dad = (0.01 * 0.01)
mom = (0.99 * 0.01)
prob = dad * mom
else: # dad_genes == 0 and mom_genes == 0
# you can get one from your dad with prob of (0.01 * 0.01)
# you can get one from your mom with prob of (0.01 * 0.01)
# you need to get one from your mom AND one from your dad
dad = (0.01 * 0.01)
mom = (0.01 * 0.01)
prob = dad * mom
elif kid_genes == 1:
if dad_genes == 2 and mom_genes == 2:
# you can get one from your dad with prob of (0.99 * 0.99)
# you can get one from your mom with prob of (0.99 * 0.99)
# you need to get one from your mom AND NOT one from your dad OR
# you need to NOT get one from your mom AND one from your dad
dad = (0.99 * 0.99)
mom = (0.99 * 0.99)
prob = (mom * (1 - dad)) + ((1 - mom) * dad)
elif dad_genes == 2 and mom_genes == 1:
# you can get one from your dad with prob of (0.99 * 0.99)
# you can get one from your mom with prob of (0.99 * 0.01)
# you need to get one from your mom AND NOT one from your dad OR
# you need to NOT get one from your mom AND one from your dad
dad = (0.99 * 0.99)
mom = (0.99 * 0.01)
prob = (mom * (1 - dad)) + ((1 - mom) * dad)
elif dad_genes == 2 and mom_genes == 0:
# you can get one from your dad with prob of (0.99 * 0.99)
# you can get one from your mom with prob of (0.01 * 0.01)
# you need to get one from your mom AND NOT one from your dad OR
# you need to NOT get one from your mom AND one from your dad
dad = (0.99 * 0.99)
mom = (0.01 * 0.01)
prob = (mom * (1 - dad)) + ((1 - mom) * dad)
elif dad_genes == 1 and mom_genes == 2:
# you can get one from your dad with prob of (0.99 * 0.01)
# you can get one from your mom with prob of (0.99 * 0.99)
# you need to get one from your mom AND NOT one from your dad OR
# you need to NOT get one from your mom AND one from your dad
dad = (0.99 * 0.01)
mom = (0.99 * 0.99)
prob = (mom * (1 - dad)) + ((1 - mom) * dad)
elif dad_genes == 1 and mom_genes == 1:
# you can get one from your dad with prob of (0.99 * 0.01)
# you can get one from your mom with prob of (0.99 * 0.01)
# you need to get one from your mom AND NOT one from your dad OR
# you need to NOT get one from your mom AND one from your dad
dad = (0.99 * 0.01)
mom = (0.99 * 0.01)
prob = (mom * (1 - dad)) + ((1 - mom) * dad)
elif dad_genes == 1 and mom_genes == 0:
# you can get one from your dad with prob of (0.99 * 0.01)
# you can get one from your mom with prob of (0.01 * 0.01)
# you need to get one from your mom AND NOT one from your dad OR
# you need to NOT get one from your mom AND one from your dad
dad = (0.99 * 0.01)
mom = (0.01 * 0.01)
prob = (mom * (1 - dad)) + ((1 - mom) * dad)
elif dad_genes == 0 and mom_genes == 2:
# you can get one from your dad with prob of (0.01 * 0.01)
# you can get one from your mom with prob of (0.99 * 0.99)
# you need to get one from your mom AND NOT one from your dad OR
# you need to NOT get one from your mom AND one from your dad
dad = (0.01 * 0.01)
mom = (0.99 * 0.99)
prob = (mom * (1 - dad)) + ((1 - mom) * dad)
elif dad_genes == 0 and mom_genes == 1:
# you can get one from your dad with prob of (0.01 * 0.01)
# you can get one from your mom with prob of (0.99 * 0.01)
# you need to get one from your mom AND one from your dad
dad = (0.01 * 0.01)
mom = (0.99 * 0.01)
prob = (mom * (1 - dad)) + ((1 - mom) * dad)
else: # dad_genes == 0 and mom_genes == 0
# you can get one from your dad with prob of (0.01 * 0.01)
# you can get one from your mom with prob of (0.01 * 0.01)
# you need to get one from your mom AND one from your dad
dad = (0.01 * 0.01)
mom = (0.01 * 0.01)
prob = (mom * (1 - dad)) + ((1 - mom) * dad)
else:
if dad_genes == 2 and mom_genes == 2:
# you can get one from your dad with prob of (0.99 * 0.99)
# you can get one from your mom with prob of (0.99 * 0.99)
# you need to NOT get one from your mom AND NOT one from your dad
dad = (0.99 * 0.99)
mom = (0.99 * 0.99)
prob = (1 - mom) * (1 - dad)
elif dad_genes == 2 and mom_genes == 1:
# you can get one from your dad with prob of (0.99 * 0.99)
# you can get one from your mom with prob of (0.99 * 0.01)
# you need to NOT get one from your mom AND NOT one from your dad
dad = (0.99 * 0.99)
mom = (0.99 * 0.01)
prob = (1 - mom) * (1 - dad)
elif dad_genes == 2 and mom_genes == 0:
# you can get one from your dad with prob of (0.99 * 0.99)
# you can get one from your mom with prob of (0.01 * 0.01)
# you need to NOT get one from your mom AND NOT one from your dad
dad = (0.99 * 0.99)
mom = (0.01 * 0.01)
prob = (1 - mom) * (1 - dad)
elif dad_genes == 1 and mom_genes == 2:
# you can get one from your dad with prob of (0.99 * 0.01)
# you can get one from your mom with prob of (0.99 * 0.99)
# you need to NOT get one from your mom AND NOT one from your dad
dad = (0.99 * 0.01)
mom = (0.99 * 0.99)
prob = (1 - mom) * (1 - dad)
elif dad_genes == 1 and mom_genes == 1:
# you can get one from your dad with prob of (0.99 * 0.01)
# you can get one from your mom with prob of (0.99 * 0.01)
# you need to NOT get one from your mom AND NOT one from your dad
dad = (0.99 * 0.01)
mom = (0.99 * 0.01)
prob = (1 - mom) * (1 - dad)
elif dad_genes == 1 and mom_genes == 0:
# you can get one from your dad with prob of (0.99 * 0.01)
# you can get one from your mom with prob of (0.01 * 0.01)
# you need to NOT get one from your mom AND NOT one from your dad
dad = (0.99 * 0.01)
mom = (0.01 * 0.01)
prob = (1 - mom) * (1 - dad)
elif dad_genes == 0 and mom_genes == 2:
# you can get one from your dad with prob of (0.01 * 0.01)
# you can get one from your mom with prob of (0.99 * 0.99)
# you need to NOT get one from your mom AND NOT one from your dad
dad = (0.01 * 0.01)
mom = (0.99 * 0.99)
prob = (1 - mom) * (1 - dad)
elif dad_genes == 0 and mom_genes == 1:
# you can get one from your dad with prob of (0.01 * 0.01)
# you can get one from your mom with prob of (0.99 * 0.01)
# you need to NOT get one from your mom AND NOT one from your dad
dad = (0.01 * 0.01)
mom = (0.99 * 0.01)
prob = (1 - mom) * (1 - dad)
else: # dad_genes == 0 and mom_genes == 0
# you can get one from your dad with prob of (0.01 * 0.01)
# you can get one from your mom with prob of (0.01 * 0.01)
# you need to NOT get one from your mom AND NOT one from your dad
dad = (0.01 * 0.01)
mom = (0.01 * 0.01)
prob = (1 - mom) * (1 - dad)
return prob
name
kid_genes = get_genes(name, one_gene, two_genes)
dad_genes = get_genes(people[name]['father'], one_gene, two_genes)
mom_genes = get_genes(people[name]['mother'], one_gene, two_genes)
kid_prob = get_parent_pass(kid_genes, dad_genes, mom_genes)
kid_prob
kid_genes == 2
kid_genes == 1
dad_genes == 2 and mom_genes == 0
dad = (0.99 * 0.99)
mom = (0.01 * 0.01)
(mom * (1 - dad)) + ((1 - mom) * dad)
mut = PROBS['mutation']
def get_parent_pass(kid_genes, dad_genes, mom_genes):
mut = PROBS['mutation']
dad = abs((dad_genes / 2) - mut)
mom = abs((mom_genes / 2) - mut)
if kid_genes == 2:
# you need to get one from your mom AND one from your dad
prob = dad * mom
elif kid_genes == 1:
# you need to get one from your mom AND NOT one from your dad OR
# you need to NOT get one from your mom AND one from your dad
prob = (mom * (1 - dad)) + ((1 - mom) * dad)
else:
# you need to NOT get one from your mom AND NOT one from your dad
prob = (1 - mom) * (1 - dad)
return prob
get_parent_pass(kid_genes, dad_genes, mom_genes)
kid_prob = get_parent_pass(kid_genes, dad_genes, mom_genes)
kid_trait = get_trait(name, have_trait)
kid_trait_prob = PROBS['trait'][kid_genes][kid_trait]
kid_prob * kid_trait_prob
kid_prob = kid_prob * kid_trait_prob
tmp_prob[name] = kid_prob
tmp_prob
final_prob = 1
for val in tmp_prob.values():
final_prob *= val
final_prob
names = set(people)
for have_trait in powerset(names):
# Check if current set of people violates known information
fails_evidence = any(
(people[person]["trait"] is not None and
people[person]["trait"] != (person in have_trait))
for person in names
)
if fails_evidence:
continue
# Loop over all sets of people who might have the gene
for one_gene in powerset(names):
for two_genes in powerset(names - one_gene):
# Update probabilities with new joint probability
p = joint_probability(people, one_gene, two_genes, have_trait)
update(probabilities, one_gene, two_genes, have_trait, p)
probabilities
normalize(probabilities)
probabilities
for person in people:
print(f"{person}:")
for field in probabilities[person]:
print(f"  {field.capitalize()}:")
for value in probabilities[person][field]:
p = probabilities[person][field][value]
print(f"    {value}: {p:.4f}")
abs((2 / 2) - 0.01)
abs((1 / 2) - 0.01)
abs((0 / 2) - 0.01)
16 * 0.835
(16 * 0.835) / 4
((16 * 0.835) / 4) * 40
553.85 - 312.18
51.75 + 69 + 51.75
553.85 + 77.38 + 62.40 + 172.5
553.85 + 77.38 + 62.40 + 172.5 + 45
setwd("AI/CS50 - Intro to AI/Week 3/crossword/")
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
